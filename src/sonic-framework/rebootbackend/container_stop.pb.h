// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rebootbackend/container_stop.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rebootbackend_2fcontainer_5fstop_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rebootbackend_2fcontainer_5fstop_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rebootbackend_2fcontainer_5fstop_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rebootbackend_2fcontainer_5fstop_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto;
class ContainerStatus;
struct ContainerStatusDefaultTypeInternal;
extern ContainerStatusDefaultTypeInternal _ContainerStatus_default_instance_;
class StopContainersRequest;
struct StopContainersRequestDefaultTypeInternal;
extern StopContainersRequestDefaultTypeInternal _StopContainersRequest_default_instance_;
class StopContainersResponse;
struct StopContainersResponseDefaultTypeInternal;
extern StopContainersResponseDefaultTypeInternal _StopContainersResponse_default_instance_;
class StopContainersResponse_ContainerStatusEntry_DoNotUse;
struct StopContainersResponse_ContainerStatusEntry_DoNotUseDefaultTypeInternal;
extern StopContainersResponse_ContainerStatusEntry_DoNotUseDefaultTypeInternal _StopContainersResponse_ContainerStatusEntry_DoNotUse_default_instance_;
class StopContainersStatusRequest;
struct StopContainersStatusRequestDefaultTypeInternal;
extern StopContainersStatusRequestDefaultTypeInternal _StopContainersStatusRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ContainerStatus* Arena::CreateMaybeMessage<::ContainerStatus>(Arena*);
template<> ::StopContainersRequest* Arena::CreateMaybeMessage<::StopContainersRequest>(Arena*);
template<> ::StopContainersResponse* Arena::CreateMaybeMessage<::StopContainersResponse>(Arena*);
template<> ::StopContainersResponse_ContainerStatusEntry_DoNotUse* Arena::CreateMaybeMessage<::StopContainersResponse_ContainerStatusEntry_DoNotUse>(Arena*);
template<> ::StopContainersStatusRequest* Arena::CreateMaybeMessage<::StopContainersStatusRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ShutdownStatus : int {
  NOT_STARTED = 0,
  WAITING_FOR_NICE_SHUTDOWN = 1,
  WAITING_FOR_FORCE_SHUTDOWN = 2,
  DONE = 3,
  ERROR = 4,
  ShutdownStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ShutdownStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ShutdownStatus_IsValid(int value);
constexpr ShutdownStatus ShutdownStatus_MIN = NOT_STARTED;
constexpr ShutdownStatus ShutdownStatus_MAX = ERROR;
constexpr int ShutdownStatus_ARRAYSIZE = ShutdownStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShutdownStatus_descriptor();
template<typename T>
inline const std::string& ShutdownStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShutdownStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShutdownStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShutdownStatus_descriptor(), enum_t_value);
}
inline bool ShutdownStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ShutdownStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShutdownStatus>(
    ShutdownStatus_descriptor(), name, value);
}
// ===================================================================

class StopContainersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StopContainersRequest) */ {
 public:
  inline StopContainersRequest() : StopContainersRequest(nullptr) {}
  ~StopContainersRequest() override;
  explicit PROTOBUF_CONSTEXPR StopContainersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopContainersRequest(const StopContainersRequest& from);
  StopContainersRequest(StopContainersRequest&& from) noexcept
    : StopContainersRequest() {
    *this = ::std::move(from);
  }

  inline StopContainersRequest& operator=(const StopContainersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopContainersRequest& operator=(StopContainersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopContainersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopContainersRequest* internal_default_instance() {
    return reinterpret_cast<const StopContainersRequest*>(
               &_StopContainersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StopContainersRequest& a, StopContainersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopContainersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopContainersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopContainersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopContainersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopContainersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopContainersRequest& from) {
    StopContainersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopContainersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StopContainersRequest";
  }
  protected:
  explicit StopContainersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerNamesFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated string container_names = 2;
  int container_names_size() const;
  private:
  int _internal_container_names_size() const;
  public:
  void clear_container_names();
  const std::string& container_names(int index) const;
  std::string* mutable_container_names(int index);
  void set_container_names(int index, const std::string& value);
  void set_container_names(int index, std::string&& value);
  void set_container_names(int index, const char* value);
  void set_container_names(int index, const char* value, size_t size);
  std::string* add_container_names();
  void add_container_names(const std::string& value);
  void add_container_names(std::string&& value);
  void add_container_names(const char* value);
  void add_container_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& container_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_container_names();
  private:
  const std::string& _internal_container_names(int index) const;
  std::string* _internal_add_container_names();
  public:

  // optional string request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // @@protoc_insertion_point(class_scope:StopContainersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> container_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rebootbackend_2fcontainer_5fstop_2eproto;
};
// -------------------------------------------------------------------

class ContainerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContainerStatus) */ {
 public:
  inline ContainerStatus() : ContainerStatus(nullptr) {}
  ~ContainerStatus() override;
  explicit PROTOBUF_CONSTEXPR ContainerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerStatus(const ContainerStatus& from);
  ContainerStatus(ContainerStatus&& from) noexcept
    : ContainerStatus() {
    *this = ::std::move(from);
  }

  inline ContainerStatus& operator=(const ContainerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerStatus& operator=(ContainerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerStatus* internal_default_instance() {
    return reinterpret_cast<const ContainerStatus*>(
               &_ContainerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContainerStatus& a, ContainerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContainerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContainerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainerStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContainerStatus& from) {
    ContainerStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContainerStatus";
  }
  protected:
  explicit ContainerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string error_message = 2;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // optional .ShutdownStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::ShutdownStatus status() const;
  void set_status(::ShutdownStatus value);
  private:
  ::ShutdownStatus _internal_status() const;
  void _internal_set_status(::ShutdownStatus value);
  public:

  // @@protoc_insertion_point(class_scope:ContainerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rebootbackend_2fcontainer_5fstop_2eproto;
};
// -------------------------------------------------------------------

class StopContainersStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StopContainersStatusRequest) */ {
 public:
  inline StopContainersStatusRequest() : StopContainersStatusRequest(nullptr) {}
  ~StopContainersStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR StopContainersStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopContainersStatusRequest(const StopContainersStatusRequest& from);
  StopContainersStatusRequest(StopContainersStatusRequest&& from) noexcept
    : StopContainersStatusRequest() {
    *this = ::std::move(from);
  }

  inline StopContainersStatusRequest& operator=(const StopContainersStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopContainersStatusRequest& operator=(StopContainersStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopContainersStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopContainersStatusRequest* internal_default_instance() {
    return reinterpret_cast<const StopContainersStatusRequest*>(
               &_StopContainersStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopContainersStatusRequest& a, StopContainersStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopContainersStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopContainersStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopContainersStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopContainersStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopContainersStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopContainersStatusRequest& from) {
    StopContainersStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopContainersStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StopContainersStatusRequest";
  }
  protected:
  explicit StopContainersStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // optional string request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // @@protoc_insertion_point(class_scope:StopContainersStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rebootbackend_2fcontainer_5fstop_2eproto;
};
// -------------------------------------------------------------------

class StopContainersResponse_ContainerStatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StopContainersResponse_ContainerStatusEntry_DoNotUse, 
    std::string, ::ContainerStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StopContainersResponse_ContainerStatusEntry_DoNotUse, 
    std::string, ::ContainerStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  StopContainersResponse_ContainerStatusEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR StopContainersResponse_ContainerStatusEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StopContainersResponse_ContainerStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StopContainersResponse_ContainerStatusEntry_DoNotUse& other);
  static const StopContainersResponse_ContainerStatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StopContainersResponse_ContainerStatusEntry_DoNotUse*>(&_StopContainersResponse_ContainerStatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StopContainersResponse.ContainerStatusEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_rebootbackend_2fcontainer_5fstop_2eproto;
};

// -------------------------------------------------------------------

class StopContainersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StopContainersResponse) */ {
 public:
  inline StopContainersResponse() : StopContainersResponse(nullptr) {}
  ~StopContainersResponse() override;
  explicit PROTOBUF_CONSTEXPR StopContainersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopContainersResponse(const StopContainersResponse& from);
  StopContainersResponse(StopContainersResponse&& from) noexcept
    : StopContainersResponse() {
    *this = ::std::move(from);
  }

  inline StopContainersResponse& operator=(const StopContainersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopContainersResponse& operator=(StopContainersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopContainersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopContainersResponse* internal_default_instance() {
    return reinterpret_cast<const StopContainersResponse*>(
               &_StopContainersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopContainersResponse& a, StopContainersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopContainersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopContainersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopContainersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopContainersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopContainersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopContainersResponse& from) {
    StopContainersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopContainersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StopContainersResponse";
  }
  protected:
  explicit StopContainersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kContainerStatusFieldNumber = 3,
    kErrorMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<string, .ContainerStatus> container_status = 3;
  int container_status_size() const;
  private:
  int _internal_container_status_size() const;
  public:
  void clear_container_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ContainerStatus >&
      _internal_container_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ContainerStatus >*
      _internal_mutable_container_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ContainerStatus >&
      container_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ContainerStatus >*
      mutable_container_status();

  // optional string error_message = 2;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // optional .ShutdownStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::ShutdownStatus status() const;
  void set_status(::ShutdownStatus value);
  private:
  ::ShutdownStatus _internal_status() const;
  void _internal_set_status(::ShutdownStatus value);
  public:

  // @@protoc_insertion_point(class_scope:StopContainersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        StopContainersResponse_ContainerStatusEntry_DoNotUse,
        std::string, ::ContainerStatus,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> container_status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rebootbackend_2fcontainer_5fstop_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StopContainersRequest

// optional string request_id = 1;
inline bool StopContainersRequest::_internal_has_request_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StopContainersRequest::has_request_id() const {
  return _internal_has_request_id();
}
inline void StopContainersRequest::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StopContainersRequest::request_id() const {
  // @@protoc_insertion_point(field_get:StopContainersRequest.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopContainersRequest::set_request_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StopContainersRequest.request_id)
}
inline std::string* StopContainersRequest::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:StopContainersRequest.request_id)
  return _s;
}
inline const std::string& StopContainersRequest::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void StopContainersRequest::_internal_set_request_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StopContainersRequest::_internal_mutable_request_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StopContainersRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:StopContainersRequest.request_id)
  if (!_internal_has_request_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.request_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StopContainersRequest::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StopContainersRequest.request_id)
}

// repeated string container_names = 2;
inline int StopContainersRequest::_internal_container_names_size() const {
  return _impl_.container_names_.size();
}
inline int StopContainersRequest::container_names_size() const {
  return _internal_container_names_size();
}
inline void StopContainersRequest::clear_container_names() {
  _impl_.container_names_.Clear();
}
inline std::string* StopContainersRequest::add_container_names() {
  std::string* _s = _internal_add_container_names();
  // @@protoc_insertion_point(field_add_mutable:StopContainersRequest.container_names)
  return _s;
}
inline const std::string& StopContainersRequest::_internal_container_names(int index) const {
  return _impl_.container_names_.Get(index);
}
inline const std::string& StopContainersRequest::container_names(int index) const {
  // @@protoc_insertion_point(field_get:StopContainersRequest.container_names)
  return _internal_container_names(index);
}
inline std::string* StopContainersRequest::mutable_container_names(int index) {
  // @@protoc_insertion_point(field_mutable:StopContainersRequest.container_names)
  return _impl_.container_names_.Mutable(index);
}
inline void StopContainersRequest::set_container_names(int index, const std::string& value) {
  _impl_.container_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StopContainersRequest.container_names)
}
inline void StopContainersRequest::set_container_names(int index, std::string&& value) {
  _impl_.container_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StopContainersRequest.container_names)
}
inline void StopContainersRequest::set_container_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.container_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StopContainersRequest.container_names)
}
inline void StopContainersRequest::set_container_names(int index, const char* value, size_t size) {
  _impl_.container_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StopContainersRequest.container_names)
}
inline std::string* StopContainersRequest::_internal_add_container_names() {
  return _impl_.container_names_.Add();
}
inline void StopContainersRequest::add_container_names(const std::string& value) {
  _impl_.container_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StopContainersRequest.container_names)
}
inline void StopContainersRequest::add_container_names(std::string&& value) {
  _impl_.container_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StopContainersRequest.container_names)
}
inline void StopContainersRequest::add_container_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.container_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StopContainersRequest.container_names)
}
inline void StopContainersRequest::add_container_names(const char* value, size_t size) {
  _impl_.container_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StopContainersRequest.container_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StopContainersRequest::container_names() const {
  // @@protoc_insertion_point(field_list:StopContainersRequest.container_names)
  return _impl_.container_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StopContainersRequest::mutable_container_names() {
  // @@protoc_insertion_point(field_mutable_list:StopContainersRequest.container_names)
  return &_impl_.container_names_;
}

// -------------------------------------------------------------------

// ContainerStatus

// optional .ShutdownStatus status = 1;
inline bool ContainerStatus::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContainerStatus::has_status() const {
  return _internal_has_status();
}
inline void ContainerStatus::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ShutdownStatus ContainerStatus::_internal_status() const {
  return static_cast< ::ShutdownStatus >(_impl_.status_);
}
inline ::ShutdownStatus ContainerStatus::status() const {
  // @@protoc_insertion_point(field_get:ContainerStatus.status)
  return _internal_status();
}
inline void ContainerStatus::_internal_set_status(::ShutdownStatus value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_ = value;
}
inline void ContainerStatus::set_status(::ShutdownStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ContainerStatus.status)
}

// optional string error_message = 2;
inline bool ContainerStatus::_internal_has_error_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContainerStatus::has_error_message() const {
  return _internal_has_error_message();
}
inline void ContainerStatus::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContainerStatus::error_message() const {
  // @@protoc_insertion_point(field_get:ContainerStatus.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerStatus::set_error_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContainerStatus.error_message)
}
inline std::string* ContainerStatus::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:ContainerStatus.error_message)
  return _s;
}
inline const std::string& ContainerStatus::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void ContainerStatus::_internal_set_error_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ContainerStatus::_internal_mutable_error_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* ContainerStatus::release_error_message() {
  // @@protoc_insertion_point(field_release:ContainerStatus.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContainerStatus::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContainerStatus.error_message)
}

// -------------------------------------------------------------------

// StopContainersStatusRequest

// optional string request_id = 1;
inline bool StopContainersStatusRequest::_internal_has_request_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StopContainersStatusRequest::has_request_id() const {
  return _internal_has_request_id();
}
inline void StopContainersStatusRequest::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StopContainersStatusRequest::request_id() const {
  // @@protoc_insertion_point(field_get:StopContainersStatusRequest.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopContainersStatusRequest::set_request_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StopContainersStatusRequest.request_id)
}
inline std::string* StopContainersStatusRequest::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:StopContainersStatusRequest.request_id)
  return _s;
}
inline const std::string& StopContainersStatusRequest::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void StopContainersStatusRequest::_internal_set_request_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StopContainersStatusRequest::_internal_mutable_request_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StopContainersStatusRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:StopContainersStatusRequest.request_id)
  if (!_internal_has_request_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.request_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StopContainersStatusRequest::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StopContainersStatusRequest.request_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StopContainersResponse

// optional .ShutdownStatus status = 1;
inline bool StopContainersResponse::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StopContainersResponse::has_status() const {
  return _internal_has_status();
}
inline void StopContainersResponse::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ShutdownStatus StopContainersResponse::_internal_status() const {
  return static_cast< ::ShutdownStatus >(_impl_.status_);
}
inline ::ShutdownStatus StopContainersResponse::status() const {
  // @@protoc_insertion_point(field_get:StopContainersResponse.status)
  return _internal_status();
}
inline void StopContainersResponse::_internal_set_status(::ShutdownStatus value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_ = value;
}
inline void StopContainersResponse::set_status(::ShutdownStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:StopContainersResponse.status)
}

// optional string error_message = 2;
inline bool StopContainersResponse::_internal_has_error_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StopContainersResponse::has_error_message() const {
  return _internal_has_error_message();
}
inline void StopContainersResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StopContainersResponse::error_message() const {
  // @@protoc_insertion_point(field_get:StopContainersResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopContainersResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StopContainersResponse.error_message)
}
inline std::string* StopContainersResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:StopContainersResponse.error_message)
  return _s;
}
inline const std::string& StopContainersResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void StopContainersResponse::_internal_set_error_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* StopContainersResponse::_internal_mutable_error_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* StopContainersResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:StopContainersResponse.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StopContainersResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StopContainersResponse.error_message)
}

// map<string, .ContainerStatus> container_status = 3;
inline int StopContainersResponse::_internal_container_status_size() const {
  return _impl_.container_status_.size();
}
inline int StopContainersResponse::container_status_size() const {
  return _internal_container_status_size();
}
inline void StopContainersResponse::clear_container_status() {
  _impl_.container_status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ContainerStatus >&
StopContainersResponse::_internal_container_status() const {
  return _impl_.container_status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ContainerStatus >&
StopContainersResponse::container_status() const {
  // @@protoc_insertion_point(field_map:StopContainersResponse.container_status)
  return _internal_container_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ContainerStatus >*
StopContainersResponse::_internal_mutable_container_status() {
  return _impl_.container_status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ContainerStatus >*
StopContainersResponse::mutable_container_status() {
  // @@protoc_insertion_point(field_mutable_map:StopContainersResponse.container_status)
  return _internal_mutable_container_status();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ShutdownStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ShutdownStatus>() {
  return ::ShutdownStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rebootbackend_2fcontainer_5fstop_2eproto
