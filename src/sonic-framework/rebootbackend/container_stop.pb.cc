// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rebootbackend/container_stop.proto

#include "rebootbackend/container_stop.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR StopContainersRequest::StopContainersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.container_names_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StopContainersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopContainersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopContainersRequestDefaultTypeInternal() {}
  union {
    StopContainersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopContainersRequestDefaultTypeInternal _StopContainersRequest_default_instance_;
PROTOBUF_CONSTEXPR ContainerStatus::ContainerStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0} {}
struct ContainerStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerStatusDefaultTypeInternal() {}
  union {
    ContainerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerStatusDefaultTypeInternal _ContainerStatus_default_instance_;
PROTOBUF_CONSTEXPR StopContainersStatusRequest::StopContainersStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StopContainersStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopContainersStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopContainersStatusRequestDefaultTypeInternal() {}
  union {
    StopContainersStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopContainersStatusRequestDefaultTypeInternal _StopContainersStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR StopContainersResponse_ContainerStatusEntry_DoNotUse::StopContainersResponse_ContainerStatusEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct StopContainersResponse_ContainerStatusEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopContainersResponse_ContainerStatusEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopContainersResponse_ContainerStatusEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StopContainersResponse_ContainerStatusEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopContainersResponse_ContainerStatusEntry_DoNotUseDefaultTypeInternal _StopContainersResponse_ContainerStatusEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StopContainersResponse::StopContainersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.container_status_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0} {}
struct StopContainersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopContainersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopContainersResponseDefaultTypeInternal() {}
  union {
    StopContainersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopContainersResponseDefaultTypeInternal _StopContainersResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_rebootbackend_2fcontainer_5fstop_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rebootbackend_2fcontainer_5fstop_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rebootbackend_2fcontainer_5fstop_2eproto = nullptr;

const uint32_t TableStruct_rebootbackend_2fcontainer_5fstop_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::StopContainersRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::StopContainersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StopContainersRequest, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::StopContainersRequest, _impl_.container_names_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ContainerStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContainerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContainerStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::ContainerStatus, _impl_.error_message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::StopContainersStatusRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::StopContainersStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StopContainersStatusRequest, _impl_.request_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::StopContainersResponse_ContainerStatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StopContainersResponse_ContainerStatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StopContainersResponse_ContainerStatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StopContainersResponse_ContainerStatusEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::StopContainersResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::StopContainersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StopContainersResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::StopContainersResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::StopContainersResponse, _impl_.container_status_),
  1,
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::StopContainersRequest)},
  { 10, 18, -1, sizeof(::ContainerStatus)},
  { 20, 27, -1, sizeof(::StopContainersStatusRequest)},
  { 28, 36, -1, sizeof(::StopContainersResponse_ContainerStatusEntry_DoNotUse)},
  { 38, 47, -1, sizeof(::StopContainersResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_StopContainersRequest_default_instance_._instance,
  &::_ContainerStatus_default_instance_._instance,
  &::_StopContainersStatusRequest_default_instance_._instance,
  &::_StopContainersResponse_ContainerStatusEntry_DoNotUse_default_instance_._instance,
  &::_StopContainersResponse_default_instance_._instance,
};

const char descriptor_table_protodef_rebootbackend_2fcontainer_5fstop_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"rebootbackend/container_stop.proto\"X\n\025"
  "StopContainersRequest\022\027\n\nrequest_id\030\001 \001("
  "\tH\000\210\001\001\022\027\n\017container_names\030\002 \003(\tB\r\n\013_requ"
  "est_id\"p\n\017ContainerStatus\022$\n\006status\030\001 \001("
  "\0162\017.ShutdownStatusH\000\210\001\001\022\032\n\rerror_message"
  "\030\002 \001(\tH\001\210\001\001B\t\n\007_statusB\020\n\016_error_message"
  "\"E\n\033StopContainersStatusRequest\022\027\n\nreque"
  "st_id\030\001 \001(\tH\000\210\001\001B\r\n\013_request_id\"\211\002\n\026Stop"
  "ContainersResponse\022$\n\006status\030\001 \001(\0162\017.Shu"
  "tdownStatusH\000\210\001\001\022\032\n\rerror_message\030\002 \001(\tH"
  "\001\210\001\001\022F\n\020container_status\030\003 \003(\0132,.StopCon"
  "tainersResponse.ContainerStatusEntry\032H\n\024"
  "ContainerStatusEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005val"
  "ue\030\002 \001(\0132\020.ContainerStatus:\0028\001B\t\n\007_statu"
  "sB\020\n\016_error_message*u\n\016ShutdownStatus\022\017\n"
  "\013NOT_STARTED\020\000\022\035\n\031WAITING_FOR_NICE_SHUTD"
  "OWN\020\001\022\036\n\032WAITING_FOR_FORCE_SHUTDOWN\020\002\022\010\n"
  "\004DONE\020\003\022\t\n\005ERROR\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto = {
    false, false, 706, descriptor_table_protodef_rebootbackend_2fcontainer_5fstop_2eproto,
    "rebootbackend/container_stop.proto",
    &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_rebootbackend_2fcontainer_5fstop_2eproto::offsets,
    file_level_metadata_rebootbackend_2fcontainer_5fstop_2eproto, file_level_enum_descriptors_rebootbackend_2fcontainer_5fstop_2eproto,
    file_level_service_descriptors_rebootbackend_2fcontainer_5fstop_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_getter() {
  return &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rebootbackend_2fcontainer_5fstop_2eproto(&descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShutdownStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto);
  return file_level_enum_descriptors_rebootbackend_2fcontainer_5fstop_2eproto[0];
}
bool ShutdownStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StopContainersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<StopContainersRequest>()._impl_._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StopContainersRequest::StopContainersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StopContainersRequest)
}
StopContainersRequest::StopContainersRequest(const StopContainersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopContainersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.container_names_){from._impl_.container_names_}
    , decltype(_impl_.request_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request_id()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StopContainersRequest)
}

inline void StopContainersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.container_names_){arena}
    , decltype(_impl_.request_id_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopContainersRequest::~StopContainersRequest() {
  // @@protoc_insertion_point(destructor:StopContainersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopContainersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.container_names_.~RepeatedPtrField();
  _impl_.request_id_.Destroy();
}

void StopContainersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopContainersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StopContainersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.container_names_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.request_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopContainersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StopContainersRequest.request_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string container_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_container_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "StopContainersRequest.container_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopContainersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StopContainersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string request_id = 1;
  if (_internal_has_request_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StopContainersRequest.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated string container_names = 2;
  for (int i = 0, n = this->_internal_container_names_size(); i < n; i++) {
    const auto& s = this->_internal_container_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StopContainersRequest.container_names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StopContainersRequest)
  return target;
}

size_t StopContainersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopContainersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string container_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.container_names_.size());
  for (int i = 0, n = _impl_.container_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.container_names_.Get(i));
  }

  // optional string request_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopContainersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopContainersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopContainersRequest::GetClassData() const { return &_class_data_; }


void StopContainersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopContainersRequest*>(&to_msg);
  auto& from = static_cast<const StopContainersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StopContainersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.container_names_.MergeFrom(from._impl_.container_names_);
  if (from._internal_has_request_id()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopContainersRequest::CopyFrom(const StopContainersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopContainersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopContainersRequest::IsInitialized() const {
  return true;
}

void StopContainersRequest::InternalSwap(StopContainersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.container_names_.InternalSwap(&other->_impl_.container_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StopContainersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_getter, &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_once,
      file_level_metadata_rebootbackend_2fcontainer_5fstop_2eproto[0]);
}

// ===================================================================

class ContainerStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerStatus>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContainerStatus::ContainerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContainerStatus)
}
ContainerStatus::ContainerStatus(const ContainerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContainerStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_message()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:ContainerStatus)
}

inline void ContainerStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.status_){0}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContainerStatus::~ContainerStatus() {
  // @@protoc_insertion_point(destructor:ContainerStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void ContainerStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ContainerStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_message_.ClearNonDefaultToEmpty();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ShutdownStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::ShutdownStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ContainerStatus.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContainerStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContainerStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .ShutdownStatus status = 1;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string error_message = 2;
  if (_internal_has_error_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ContainerStatus.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContainerStatus)
  return target;
}

size_t ContainerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContainerStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_message());
    }

    // optional .ShutdownStatus status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContainerStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainerStatus::GetClassData() const { return &_class_data_; }


void ContainerStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContainerStatus*>(&to_msg);
  auto& from = static_cast<const ContainerStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContainerStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainerStatus::CopyFrom(const ContainerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContainerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStatus::IsInitialized() const {
  return true;
}

void ContainerStatus::InternalSwap(ContainerStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_getter, &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_once,
      file_level_metadata_rebootbackend_2fcontainer_5fstop_2eproto[1]);
}

// ===================================================================

class StopContainersStatusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<StopContainersStatusRequest>()._impl_._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StopContainersStatusRequest::StopContainersStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StopContainersStatusRequest)
}
StopContainersStatusRequest::StopContainersStatusRequest(const StopContainersStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopContainersStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request_id()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StopContainersStatusRequest)
}

inline void StopContainersStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopContainersStatusRequest::~StopContainersStatusRequest() {
  // @@protoc_insertion_point(destructor:StopContainersStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopContainersStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
}

void StopContainersStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopContainersStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StopContainersStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.request_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopContainersStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StopContainersStatusRequest.request_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopContainersStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StopContainersStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string request_id = 1;
  if (_internal_has_request_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StopContainersStatusRequest.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StopContainersStatusRequest)
  return target;
}

size_t StopContainersStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopContainersStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string request_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopContainersStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopContainersStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopContainersStatusRequest::GetClassData() const { return &_class_data_; }


void StopContainersStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopContainersStatusRequest*>(&to_msg);
  auto& from = static_cast<const StopContainersStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StopContainersStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request_id()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopContainersStatusRequest::CopyFrom(const StopContainersStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopContainersStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopContainersStatusRequest::IsInitialized() const {
  return true;
}

void StopContainersStatusRequest::InternalSwap(StopContainersStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StopContainersStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_getter, &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_once,
      file_level_metadata_rebootbackend_2fcontainer_5fstop_2eproto[2]);
}

// ===================================================================

StopContainersResponse_ContainerStatusEntry_DoNotUse::StopContainersResponse_ContainerStatusEntry_DoNotUse() {}
StopContainersResponse_ContainerStatusEntry_DoNotUse::StopContainersResponse_ContainerStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StopContainersResponse_ContainerStatusEntry_DoNotUse::MergeFrom(const StopContainersResponse_ContainerStatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StopContainersResponse_ContainerStatusEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_getter, &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_once,
      file_level_metadata_rebootbackend_2fcontainer_5fstop_2eproto[3]);
}

// ===================================================================

class StopContainersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StopContainersResponse>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StopContainersResponse::StopContainersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &StopContainersResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:StopContainersResponse)
}
StopContainersResponse::StopContainersResponse(const StopContainersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopContainersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.container_status_)*/{}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.container_status_.MergeFrom(from._impl_.container_status_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_message()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:StopContainersResponse)
}

inline void StopContainersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.container_status_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.status_){0}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopContainersResponse::~StopContainersResponse() {
  // @@protoc_insertion_point(destructor:StopContainersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void StopContainersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.container_status_.Destruct();
  _impl_.container_status_.~MapField();
  _impl_.error_message_.Destroy();
}

void StopContainersResponse::ArenaDtor(void* object) {
  StopContainersResponse* _this = reinterpret_cast< StopContainersResponse* >(object);
  _this->_impl_.container_status_.Destruct();
}
void StopContainersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopContainersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StopContainersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.container_status_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_message_.ClearNonDefaultToEmpty();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopContainersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ShutdownStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::ShutdownStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StopContainersResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .ContainerStatus> container_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.container_status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopContainersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StopContainersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .ShutdownStatus status = 1;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string error_message = 2;
  if (_internal_has_error_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StopContainersResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // map<string, .ContainerStatus> container_status = 3;
  if (!this->_internal_container_status().empty()) {
    using MapType = ::_pb::Map<std::string, ::ContainerStatus>;
    using WireHelper = StopContainersResponse_ContainerStatusEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_container_status();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "StopContainersResponse.ContainerStatusEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StopContainersResponse)
  return target;
}

size_t StopContainersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopContainersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ContainerStatus> container_status = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_container_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ContainerStatus >::const_iterator
      it = this->_internal_container_status().begin();
      it != this->_internal_container_status().end(); ++it) {
    total_size += StopContainersResponse_ContainerStatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_message());
    }

    // optional .ShutdownStatus status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopContainersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopContainersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopContainersResponse::GetClassData() const { return &_class_data_; }


void StopContainersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopContainersResponse*>(&to_msg);
  auto& from = static_cast<const StopContainersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StopContainersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.container_status_.MergeFrom(from._impl_.container_status_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopContainersResponse::CopyFrom(const StopContainersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopContainersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopContainersResponse::IsInitialized() const {
  return true;
}

void StopContainersResponse::InternalSwap(StopContainersResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.container_status_.InternalSwap(&other->_impl_.container_status_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopContainersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_getter, &descriptor_table_rebootbackend_2fcontainer_5fstop_2eproto_once,
      file_level_metadata_rebootbackend_2fcontainer_5fstop_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::StopContainersRequest*
Arena::CreateMaybeMessage< ::StopContainersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StopContainersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ContainerStatus*
Arena::CreateMaybeMessage< ::ContainerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContainerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::StopContainersStatusRequest*
Arena::CreateMaybeMessage< ::StopContainersStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StopContainersStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StopContainersResponse_ContainerStatusEntry_DoNotUse*
Arena::CreateMaybeMessage< ::StopContainersResponse_ContainerStatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StopContainersResponse_ContainerStatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StopContainersResponse*
Arena::CreateMaybeMessage< ::StopContainersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StopContainersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
